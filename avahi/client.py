import netifaces
import os
import re
import subprocess
import threading

from avahi.service import Service
from avahi.types import HTTP


def unescape_unicode(text):
    """
    Unescape the Avahi-escaped representation of a string.

    :param text: String returned from the client Avahi call.
    :return: An Unicode-unescaped version of the string.
    """
    def replace(match):
        numeric, other = match.groups()
        if numeric:
            return chr(int(numeric[1:]))
        else:
            return other[1:]

    return re.sub(r'(\\\d\d\d)|(\\.)', replace, text.encode('ascii'))


def parse_txt(txt):
    """
    Parse a raw txt representation into a key-value map.

    :param txt: Txt string for a service returned from the client Avahi call.
    :return: A key-value map of all entries represented in the txt string.
    """
    def reduction(acc, val):
        try:
            key, value = val.split('=')
            return dict(acc, **{key: value})
        except ValueError:
            return acc

    return reduce(reduction, filter(None, txt[1:-1].split('" "')), {})


def get_iface_ip(iface):
    """
    Retrieve the IPv4 address associated with a particular interface name.

    :param iface: Interface name.
    :return: The IPv4 address of the specified interface name, if available; None otherwise.
    """
    try:
        return netifaces.ifaddresses(iface)[netifaces.AF_INET][0]['addr']
    except ValueError:
        return None


class AvahiClient(object):
    """
    Client for publishing and browsing Avahi-registered services.
    """

    def publish_service(self, name, type, port, iface='bat0'):
        """
        Publish a service in a background thread. The service will be automatically unpublished
        when the parent process exits.

        :param name: Name of the service.
        :param type: Type of the service; one of the constants from avahi.types.
        :param port: Port on which the service is running.
        :param iface: Name of the network interface from which the advertised service IP address
                      should be obtained.
        """
        advertise_ip = get_iface_ip(iface)
        args = [
            '-s',
            name,
            type,
            port,
            # "Force" advertisement of a specific interface IP address, if obtainable.
            # The discovery client should prioritize this TXT record value if specified, otherwise
            # gracefully fall back to the Avahi-supplied IP address.
            advertise_ip and 'skynet-ip={advertise_ip}'.format(advertise_ip=advertise_ip),
        ]

        threading.Thread(target=self._publish, args=(args,)).start()

    def browse_services(self, local=True, service_type=HTTP):
        """
        Browse all discovered services.

        :param local: True to include locally published services; False to exclude locally published
                      services.
        :param service_type: The service type to discover; one of the constants in avahi.types.
        :return: An iterable of Service objects representing discovered services in the network.
        """
        shell_output = self._browse([
            '--resolve',  # Resolve into IP addresses
            '--ignore-local' if not local else '',
            '--parsable',  # Machine-parsable format
            '--no-db-lookup',  # Don't look up service type to speed lookup
            '--terminate',  # Don't hang forever
            service_type,
        ]).split('\n')

        resolved_services = (
            line.split(';')
            for line in shell_output
            if line and line.startswith('=')
        )

        return (
            Service(
                ip=service[7],
                name=unescape_unicode(service[3]),
                port=int(service[8]),
                txt=parse_txt(service[9]),
            )
            for service in resolved_services
            if service[2] == 'IPv4'
        )

    def _publish(self, flags):
        """
        Invoke the Avahi publish executable.

        :param flags: Flags to pass to the executable.
        :return: Stdout of invoking the publish executable.
        """
        return self._exec(['avahi-publish'] + flags)

    def _browse(self, flags):
        """
        Invoke the Avahi browsing executable.

        :param flags: Flags to pass to the executable.
        :return: Stdout of invoking the browse executable.
        """
        return self._exec(['avahi-browse'] + flags)

    def _exec(self, cmd):
        """
        Execute an arbitrary shell command, redirecting stderr to /dev/null.

        :param cmd: List of strings representing the shell command to execute.
        :return: Stdout generated by the command.
        """
        with open(os.devnull, 'w') as devnull:
            return subprocess.check_output(map(str, filter(None, cmd)), stderr=devnull)
